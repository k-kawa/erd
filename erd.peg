package main

import "strings"

type Parser Peg {
     tables []Table
     table *Table
     column *Column
}

root <- (Sep* TableDef)* Sep* EOT

Comment <- "\n#" [^\n]+ "\n"

Sep <- Comment / [\n\t ]
Space <- " "

TableDef <- TableName Sep+ (":" Space* TableDescription)? LeftBrace Sep+ Columns Sep+ RightBrace

LeftBrace <- "{"

RightBrace <- "}" {
    p.tables = append(p.tables, *p.table)
}

TableName <- <[a-zA-Z0-9_]+> {
    p.table = &Table{
        Name: text,
        Columns: make([]Column, 0),
        Description: "",
	   }
}

TableDescription <- <[^\n{]+> {
    p.table.Description = strings.TrimSpace(text)
}

Columns <- Column (Sep+ Column)*

Column <- ColumnDef Space* (RightArrow Sep+ TargetTableName dot TargetColumnName Space*)?  ( ":" Space* ColumnDescription)? {
    p.table.Columns = append(p.table.Columns, *p.column)
}

ColumnDescription <- <[^\n]+> {
    p.column.Description = strings.TrimSpace(text)
}

dot <- "."

ColumnName <- <[a-zA-Z0-9_]+> {
	p.column = &Column{
	  Name: text,
	}
}

ColumnDef <- ColumnName (Space* ColumnType)?

RightArrow <- RightDotArrow / RightLineArrow

ColumnType <- <[^-:.\n]+> {
    p.column.Type = strings.TrimSpace(text)
}



RightDotArrow <- "..>" {
    p.column.Relation = &Relation{
        LineType: DotLine,
    }
}

RightLineArrow <- "->" {
    p.column.Relation = &Relation{
        LineType: NormalLine,
    }
}

TargetTableName <- <[a-zA-Z0-9_]+> {
    p.column.Relation.TableName = text
}

TargetColumnName <- <[a-zA-Z0-9_]+> {
    p.column.Relation.ColumnName = text
}


EOT <- !.
